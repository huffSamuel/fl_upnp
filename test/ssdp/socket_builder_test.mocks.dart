// Mocks generated by Mockito 5.4.4 from annotations
// in upnped/test/ssdp/socket_builder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:upnped/src/ssdp/ssdp.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRawDatagramSocket_0 extends _i1.SmartFake
    implements _i2.RawDatagramSocket {
  _FakeRawDatagramSocket_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternetAddress_1 extends _i1.SmartFake
    implements _i2.InternetAddress {
  _FakeInternetAddress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRawSocketEvent_2 extends _i1.SmartFake
    implements _i2.RawSocketEvent {
  _FakeRawSocketEvent_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_3<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SocketFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketFactory extends _i1.Mock implements _i4.SocketFactory {
  @override
  _i3.Future<_i2.RawDatagramSocket> create(
    _i2.InternetAddress? address,
    int? port,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [
            address,
            port,
          ],
        ),
        returnValue:
            _i3.Future<_i2.RawDatagramSocket>.value(_FakeRawDatagramSocket_0(
          this,
          Invocation.method(
            #create,
            [
              address,
              port,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawDatagramSocket>.value(_FakeRawDatagramSocket_0(
          this,
          Invocation.method(
            #create,
            [
              address,
              port,
            ],
          ),
        )),
      ) as _i3.Future<_i2.RawDatagramSocket>);
}

/// A class which mocks [RawDatagramSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockRawDatagramSocket extends _i1.Mock implements _i2.RawDatagramSocket {
  @override
  bool get readEventsEnabled => (super.noSuchMethod(
        Invocation.getter(#readEventsEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set readEventsEnabled(bool? _readEventsEnabled) => super.noSuchMethod(
        Invocation.setter(
          #readEventsEnabled,
          _readEventsEnabled,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get writeEventsEnabled => (super.noSuchMethod(
        Invocation.getter(#writeEventsEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set writeEventsEnabled(bool? _writeEventsEnabled) => super.noSuchMethod(
        Invocation.setter(
          #writeEventsEnabled,
          _writeEventsEnabled,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get multicastLoopback => (super.noSuchMethod(
        Invocation.getter(#multicastLoopback),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set multicastLoopback(bool? _multicastLoopback) => super.noSuchMethod(
        Invocation.setter(
          #multicastLoopback,
          _multicastLoopback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get multicastHops => (super.noSuchMethod(
        Invocation.getter(#multicastHops),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set multicastHops(int? _multicastHops) => super.noSuchMethod(
        Invocation.setter(
          #multicastHops,
          _multicastHops,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set multicastInterface(_i2.NetworkInterface? _multicastInterface) =>
      super.noSuchMethod(
        Invocation.setter(
          #multicastInterface,
          _multicastInterface,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get broadcastEnabled => (super.noSuchMethod(
        Invocation.getter(#broadcastEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set broadcastEnabled(bool? _broadcastEnabled) => super.noSuchMethod(
        Invocation.setter(
          #broadcastEnabled,
          _broadcastEnabled,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get port => (super.noSuchMethod(
        Invocation.getter(#port),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.InternetAddress get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _FakeInternetAddress_1(
          this,
          Invocation.getter(#address),
        ),
        returnValueForMissingStub: _FakeInternetAddress_1(
          this,
          Invocation.getter(#address),
        ),
      ) as _i2.InternetAddress);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i2.RawSocketEvent> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.getter(#first),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.getter(#first),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Future<_i2.RawSocketEvent> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.getter(#last),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.getter(#last),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Future<_i2.RawSocketEvent> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.getter(#single),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.getter(#single),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int send(
    List<int>? buffer,
    _i2.InternetAddress? address,
    int? port,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [
            buffer,
            address,
            port,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void joinMulticast(
    _i2.InternetAddress? group, [
    _i2.NetworkInterface? interface,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #joinMulticast,
          [
            group,
            interface,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void leaveMulticast(
    _i2.InternetAddress? group, [
    _i2.NetworkInterface? interface,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #leaveMulticast,
          [
            group,
            interface,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Uint8List getRawOption(_i2.RawSocketOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRawOption,
          [option],
        ),
        returnValue: _i5.Uint8List(0),
        returnValueForMissingStub: _i5.Uint8List(0),
      ) as _i5.Uint8List);

  @override
  void setRawOption(_i2.RawSocketOption? option) => super.noSuchMethod(
        Invocation.method(
          #setRawOption,
          [option],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Stream<_i2.RawSocketEvent> asBroadcastStream({
    void Function(_i3.StreamSubscription<_i2.RawSocketEvent>)? onListen,
    void Function(_i3.StreamSubscription<_i2.RawSocketEvent>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.StreamSubscription<_i2.RawSocketEvent> listen(
    void Function(_i2.RawSocketEvent)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<_i2.RawSocketEvent>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub:
            _FakeStreamSubscription_3<_i2.RawSocketEvent>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i3.StreamSubscription<_i2.RawSocketEvent>);

  @override
  _i3.Stream<_i2.RawSocketEvent> where(
          bool Function(_i2.RawSocketEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Stream<S> map<S>(S Function(_i2.RawSocketEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Stream<E> asyncMap<E>(
          _i3.FutureOr<E> Function(_i2.RawSocketEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i3.Stream<E>.empty(),
        returnValueForMissingStub: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<E> asyncExpand<E>(
          _i3.Stream<E>? Function(_i2.RawSocketEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i3.Stream<E>.empty(),
        returnValueForMissingStub: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<_i2.RawSocketEvent> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Stream<S> expand<S>(Iterable<S> Function(_i2.RawSocketEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<dynamic> pipe(
          _i3.StreamConsumer<_i2.RawSocketEvent>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Stream<S> transform<S>(
          _i3.StreamTransformer<_i2.RawSocketEvent, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<_i2.RawSocketEvent> reduce(
          _i2.RawSocketEvent Function(
            _i2.RawSocketEvent,
            _i2.RawSocketEvent,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      _i2.RawSocketEvent,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_4<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_4<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i3.Future<S>);

  @override
  _i3.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> forEach(void Function(_i2.RawSocketEvent)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> every(bool Function(_i2.RawSocketEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> any(bool Function(_i2.RawSocketEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i3.Stream<R>.empty(),
        returnValueForMissingStub: _i3.Stream<R>.empty(),
      ) as _i3.Stream<R>);

  @override
  _i3.Future<List<_i2.RawSocketEvent>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue:
            _i3.Future<List<_i2.RawSocketEvent>>.value(<_i2.RawSocketEvent>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.RawSocketEvent>>.value(<_i2.RawSocketEvent>[]),
      ) as _i3.Future<List<_i2.RawSocketEvent>>);

  @override
  _i3.Future<Set<_i2.RawSocketEvent>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue:
            _i3.Future<Set<_i2.RawSocketEvent>>.value(<_i2.RawSocketEvent>{}),
        returnValueForMissingStub:
            _i3.Future<Set<_i2.RawSocketEvent>>.value(<_i2.RawSocketEvent>{}),
      ) as _i3.Future<Set<_i2.RawSocketEvent>>);

  @override
  _i3.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_4<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_4<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i3.Future<E>);

  @override
  _i3.Stream<_i2.RawSocketEvent> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Stream<_i2.RawSocketEvent> takeWhile(
          bool Function(_i2.RawSocketEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Stream<_i2.RawSocketEvent> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Stream<_i2.RawSocketEvent> skipWhile(
          bool Function(_i2.RawSocketEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Stream<_i2.RawSocketEvent> distinct(
          [bool Function(
            _i2.RawSocketEvent,
            _i2.RawSocketEvent,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);

  @override
  _i3.Future<_i2.RawSocketEvent> firstWhere(
    bool Function(_i2.RawSocketEvent)? test, {
    _i2.RawSocketEvent Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Future<_i2.RawSocketEvent> lastWhere(
    bool Function(_i2.RawSocketEvent)? test, {
    _i2.RawSocketEvent Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Future<_i2.RawSocketEvent> singleWhere(
    bool Function(_i2.RawSocketEvent)? test, {
    _i2.RawSocketEvent Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Future<_i2.RawSocketEvent> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.RawSocketEvent>.value(_FakeRawSocketEvent_2(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        )),
      ) as _i3.Future<_i2.RawSocketEvent>);

  @override
  _i3.Stream<_i2.RawSocketEvent> timeout(
    Duration? timeLimit, {
    void Function(_i3.EventSink<_i2.RawSocketEvent>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i3.Stream<_i2.RawSocketEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.RawSocketEvent>.empty(),
      ) as _i3.Stream<_i2.RawSocketEvent>);
}

/// A class which mocks [NetworkInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInterface extends _i1.Mock implements _i2.NetworkInterface {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get index => (super.noSuchMethod(
        Invocation.getter(#index),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<_i2.InternetAddress> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i2.InternetAddress>[],
        returnValueForMissingStub: <_i2.InternetAddress>[],
      ) as List<_i2.InternetAddress>);
}
